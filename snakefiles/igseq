##############################################################################
## LOCUS ASSEMBLY FIGURES SNAKEFILE                                         ##
##############################################################################

#-----------------------------------------------------------------------------
# Overall cohort summary
#-----------------------------------------------------------------------------

rule igseq_cohorts_table:
    """Prepare summary table of IgSeq cohorts."""
    input: "input_files/data/fish_data/igseq-cohorts.csv"
    output:
        fish = "output_files/tables/igseq-cohorts-fish.tex",
        summary = "output_files/tables/igseq-cohorts-summary.tex",
    params:
        aux = aux_dir
    log: "log_files/igseq-cohorts-table.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-cohorts-table.R")

rule igseq_edit_fish_table_1:
    """Edit columns and headers for fish data table for thesis."""
    input: "output_files/tables/igseq-cohorts-fish.tex"
    output: "output_files/tables/igseq-cohorts-fish_edited-1.tex"
    log: "log_files/igseq-edit-fish-table.dbg"
    shell:
        "cat {input} | sed 's/{{rrlrllll}}/{{rrrrllrr}}/' 2> {log} | "
        "sed 's/Fish ID/Fish ID\\\\tnote{{1}}/' 2> {log} > {output} "

rule igseq_edit_fish_table_2:
    """Add midrules to fish data table for thesis."""
    input: "output_files/tables/igseq-cohorts-fish_edited-1.tex"
    output: "output_files/tables/igseq-cohorts-fish_edited-2.tex"
    log: "log_files/igseq-edit-fish-table.dbg"
    shell:
        "cat {input} | "
        "sed -e '/\W[1234] & 10/s/\\\\\\\\/\\\\\\\\\\\\midrule/' 2> {log} > {output} "


#-----------------------------------------------------------------------------
# Pilot study
#-----------------------------------------------------------------------------

rule igseq_pilot_read_survival:
    input: "input_files/data/changeo/survival/pilot-survival.tsv"
    output:
        init = "output_files/figures/svg/igseq-pilot-read-survival-init.svg",
        all = "output_files/figures/svg/igseq-pilot-read-survival-all.svg",
        nreads_raw_total = "output_files/txt/igseq-pilot-nreads-raw-total.txt",
        nreads_raw_replicate_min = "output_files/txt/igseq-pilot-nreads-raw-replicate-min.txt",
        nreads_raw_replicate_max = "output_files/txt/igseq-pilot-nreads-raw-replicate-max.txt",
        nreads_raw_individual_min = "output_files/txt/igseq-pilot-nreads-raw-individual-min.txt",
        nreads_raw_individual_max = "output_files/txt/igseq-pilot-nreads-raw-individual-max.txt",
        surv_init_min = "output_files/txt/igseq-pilot-read-survival-init-min.txt",
        surv_init_max = "output_files/txt/igseq-pilot-read-survival-init-max.txt",
        rel_loss_min = "output_files/txt/igseq-pilot-rel-loss-min.txt",
        rel_loss_max = "output_files/txt/igseq-pilot-rel-loss-max.txt",
        rel_loss_total = "output_files/txt/igseq-pilot-rel-loss-total.txt",
        surv_all_min = "output_files/txt/igseq-pilot-read-survival-all-min.txt",
        surv_all_max = "output_files/txt/igseq-pilot-read-survival-all-max.txt",
        n_lost_cl = "output_files/txt/igseq-pilot-nseq-lost-clonotyping.txt",
        pc_lost_cl = "output_files/txt/igseq-pilot-pc-reads-lost-clonotyping.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-read-survival.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-read-survival.R")

rule igseq_pilot_functional:
    input: "input_files/data/changeo/db/pilot-named.tab"
    output:
        prop = "output_files/figures/svg/igseq-pilot-functional-prop.svg",
        vscores = "output_files/figures/svg/igseq-pilot-functional-vscores.svg",
        nseq_total = "output_files/txt/igseq-pilot-nseq-init-total.txt",
        nseq_individual_min = "output_files/txt/igseq-pilot-nseq-init-individual-min.txt",
        nseq_individual_max = "output_files/txt/igseq-pilot-nseq-init-individual-max.txt",
        nseq_replicate_min = "output_files/txt/igseq-pilot-nseq-init-replicate-min.txt",
        nseq_replicate_max = "output_files/txt/igseq-pilot-nseq-init-replicate-max.txt",
        nseq_pc_functional = "output_files/txt/igseq-pilot-nseq-init-pc-functional.txt",
        nseq_pc_noj = "output_files/txt/igseq-pilot-nseq-init-pc-noj.txt",
        nseq_pc_other = "output_files/txt/igseq-pilot-nseq-init-pc-other.txt",
        nreads_pc_functional = "output_files/txt/igseq-pilot-nreads-init-pc-functional.txt",
        nreads_pc_noj = "output_files/txt/igseq-pilot-nreads-init-pc-noj.txt",
        nreads_pc_other = "output_files/txt/igseq-pilot-nreads-init-pc-other.txt",
        vmean_functional = "output_files/txt/igseq-pilot-vscore-mean-functional.txt",
        vmean_noj = "output_files/txt/igseq-pilot-vscore-mean-noj.txt",
        vmean_other = "output_files/txt/igseq-pilot-vscore-mean-other.txt",
        vsd_functional = "output_files/txt/igseq-pilot-vscore-sd-functional.txt",
        vsd_noj = "output_files/txt/igseq-pilot-vscore-sd-noj.txt",
        vsd_other = "output_files/txt/igseq-pilot-vscore-sd-other.txt",
        nseq_functional_filtered = "output_files/txt/igseq-pilot-nseq-init-functional-filtered.txt",
        nseq_noj_filtered = "output_files/txt/igseq-pilot-nseq-init-noj-filtered.txt",
        nseq_other_filtered = "output_files/txt/igseq-pilot-nseq-init-other-filtered.txt",
        nseq_pc_functional_filtered = "output_files/txt/igseq-pilot-nseq-init-pc-functional-filtered.txt",
        nseq_pc_noj_filtered = "output_files/txt/igseq-pilot-nseq-init-pc-noj-filtered.txt",
        nseq_pc_other_filtered = "output_files/txt/igseq-pilot-nseq-init-pc-other-filtered.txt",
        nseq_kept_vscore = "output_files/txt/igseq-pilot-nseq-init-kept-vscore.txt",
        nseq_dropped_vscore = "output_files/txt/igseq-pilot-nseq-init-dropped-vscore.txt",
        nreads_kept_vscore = "output_files/txt/igseq-pilot-nreads-init-pc-kept-vscore.txt",
        nreads_dropped_vscore = "output_files/txt/igseq-pilot-nreads-init-pc-dropped-vscore.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-functional.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-functional.R")

rule igseq_pilot_clone_sizes:
    input: "input_files/data/changeo/db/pilot-final.tab"
    output:
        sizes = "output_files/figures/svg/igseq-pilot-clone-sizes.svg",
        cor = "output_files/figures/svg/igseq-pilot-clone-sizes-cor.svg",
        clones = "output_files/txt/igseq-pilot-nseq-assigned-clones.txt",
        nclones_indiv_min = "output_files/txt/igseq-pilot-nclones-individual-min.txt",
        nclones_indiv_max = "output_files/txt/igseq-pilot-nclones-individual-max.txt",
        nclones_indiv_med = "output_files/txt/igseq-pilot-nclones-individual-med.txt",
        nclones_pc_1count = "output_files/txt/igseq-pilot-nclones-pc-1count.txt",
        nclones_pc_small = "output_files/txt/igseq-pilot-nclones-pc-small.txt",
        nclones_pc_1rep = "output_files/txt/igseq-pilot-nclones-pc-1rep.txt",
        nclones_pc_2rep = "output_files/txt/igseq-pilot-nclones-pc-2rep.txt",
        nclones_pc_3rep = "output_files/txt/igseq-pilot-nclones-pc-3rep.txt",
        interrep = "output_files/txt/igseq-pilot-clones-interrep-cor-avg.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-clone-sizes.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-clone-sizes.R")

rule igseq_pilot_clone_zipf:
    input: "input_files/data/changeo/db/pilot-final.tab"
    output:
        lines = "output_files/figures/svg/igseq-pilot-clone-zipf-lines.svg",
        grad = "output_files/figures/svg/igseq-pilot-clone-zipf-grad.svg",
        p20 = "output_files/figures/svg/igseq-pilot-clone-p20.svg",
        exp_min = "output_files/txt/igseq-pilot-clone-zipf-exp-min.txt",
        exp_max = "output_files/txt/igseq-pilot-clone-zipf-exp-max.txt",
        exp_null_min = "output_files/txt/igseq-pilot-clone-zipf-exp-null-min.txt",
        exp_null_max = "output_files/txt/igseq-pilot-clone-zipf-exp-null-max.txt",
        p20_obs_min = "output_files/txt/igseq-pilot-clone-zipf-p20-obs-min.txt",
        p20_obs_max = "output_files/txt/igseq-pilot-clone-zipf-p20-obs-max.txt",
        p20_exp_min = "output_files/txt/igseq-pilot-clone-zipf-p20-exp-min.txt",
        p20_exp_max = "output_files/txt/igseq-pilot-clone-zipf-p20-exp-max.txt",
        stats_indiv = "output_files/tsv/igseq-pilot-clone-stats-indiv.tsv",
        stats_rep = "output_files/tsv/igseq-pilot-clone-stats-rep.tsv",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-clone-zipf.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-clone-zipf.R")

rule igseq_pilot_clone_expansions:
    input: "input_files/data/changeo/db/pilot-final.tab"
    output:
        all = "output_files/figures/svg/igseq-pilot-clone-expansions.svg",
        rep = "output_files/figures/svg/igseq-pilot-clone-expansions-rep.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-clone-expansions.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-clone-expansions.R")

rule igseq_pilot_clone_diversity:
    input:
        grouped = "input_files/data/changeo/spectra/pilot-clone-diversity-grouped.tsv",
        solo = "input_files/data/changeo/spectra/pilot-clone-diversity-solo.tsv",
        stats_indiv = "output_files/tsv/igseq-pilot-clone-stats-indiv.tsv",
        stats_rep = "output_files/tsv/igseq-pilot-clone-stats-rep.tsv",
    output:
        spectra_grouped = "output_files/figures/svg/igseq-pilot-clone-diversity.svg",
        spectra_solo = "output_files/figures/svg/igseq-pilot-clone-diversity-solo.svg",
        box_solo = "output_files/figures/svg/igseq-pilot-clone-diversity-solo-box.svg",
        metrics_cor = "output_files/figures/svg/igseq-pilot-clone-diversity-metrics-cor.svg",
        rep_best_metric = "output_files/txt/igseq-pilot-clone-diversity-cor-rep-best-metric.txt",
        rep_best_q = "output_files/txt/igseq-pilot-clone-diversity-cor-rep-best-q.txt",
        rep_best_r = "output_files/txt/igseq-pilot-clone-diversity-cor-rep-best-r.txt",
        avg_best_metric = "output_files/txt/igseq-pilot-clone-diversity-cor-avg-best-metric.txt",
        avg_best_q = "output_files/txt/igseq-pilot-clone-diversity-cor-avg-best-q.txt",
        avg_best_r = "output_files/txt/igseq-pilot-clone-diversity-cor-avg-best-r.txt",
        avg_cross_q = "output_files/txt/igseq-pilot-clone-diversity-cor-avg-cross-q.txt",
        avg_sfilter_best_q = "output_files/txt/igseq-pilot-clone-diversity-cor-avg-sfilter-best-q.txt",
        avg_sfilter_best_r = "output_files/txt/igseq-pilot-clone-diversity-cor-avg-sfilter-best-r.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-clone-diversity.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-clone-diversity.R")

rule igseq_pilot_segment_metrics:
    input: 
        tab = "input_files/data/changeo/db/pilot-final.tab",
        vnames = "input_files/data/segments/nfu/nfu_vh_name_conversion.csv",
        dnames = "input_files/data/segments/nfu/nfu_dh_name_conversion.csv",
        jnames = "input_files/data/segments/nfu/nfu_jh_name_conversion.csv",
    output:
        rf = "output_files/figures/svg/igseq-pilot-vj-rank-frequency.svg",
        stats_indiv = "output_files/tsv/igseq-pilot-vj-stats-indiv.tsv",
        stats_rep = "output_files/tsv/igseq-pilot-vj-stats-rep.tsv",
        one_vj_n_pc = "output_files/txt/igseq-pilot-one-vj-n-pc.txt",
        one_vj_conscount_pc = "output_files/txt/igseq-pilot-one-vj-conscount-pc.txt",
        one_vdj_n_pc = "output_files/txt/igseq-pilot-one-vdj-n-pc.txt",
        one_vdj_conscount_pc = "output_files/txt/igseq-pilot-one-vdj-conscount-pc.txt",
        ambig_d_n_pc = "output_files/txt/igseq-pilot-ambig-d-n-pc.txt",
        ambig_d_conscount_pc = "output_files/txt/igseq-pilot-ambig-d-conscount-pc.txt",
        n_vj_theoretical =  "output_files/txt/igseq-pilot-vj-n-theoretical.txt",
        n_vj_any =  "output_files/txt/igseq-pilot-vj-n-any.txt",
        pc_vj_any =  "output_files/txt/igseq-pilot-vj-pc-any.txt",
        n_vj_min =  "output_files/txt/igseq-pilot-vj-n-min.txt",
        n_vj_max =  "output_files/txt/igseq-pilot-vj-n-max.txt",
        pc_vj_min =  "output_files/txt/igseq-pilot-vj-pc-min.txt",
        pc_vj_max =  "output_files/txt/igseq-pilot-vj-pc-max.txt",
        vj_p20_min = "output_files/txt/igseq-pilot-vj-p20-min.txt",
        vj_p20_max = "output_files/txt/igseq-pilot-vj-p20-max.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-segment-metrics.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-segment-metrics.R")

rule igseq_pilot_segment_diversity:
    input:
        grouped = "input_files/data/changeo/spectra/pilot-vj-diversity-grouped.tsv",
        solo = "input_files/data/changeo/spectra/pilot-vj-diversity-solo.tsv",
    output:
        spectra_grouped = "output_files/figures/svg/igseq-pilot-vj-diversity.svg",
        spectra_solo = "output_files/figures/svg/igseq-pilot-vj-diversity-solo.svg",
        box_solo = "output_files/figures/svg/igseq-pilot-vj-diversity-solo-box.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-segment-diversity.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-segment-diversity.R")

rule igseq_pilot_rdi:
    input: "input_files/data/changeo/db/pilot-final.tab"
    output: "output_files/figures/svg/igseq-pilot-rdi.svg"
    params:
        aux = aux_dir,
        rdi = config["rdi_path"],
    log: "log_files/igseq-pilot-rdi.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-rdi.R")

rule igseq_pilot_igor_distributions:
    input:
        segments_indiv = "input_files/data/igor/segments/pilot-individual-segments.tsv",
        segments_group = "input_files/data/igor/segments/pilot-group-segments.tsv",
        indels_indiv = "input_files/data/igor/indels/pilot-individual-indels.tsv",
        indels_group = "input_files/data/igor/indels/pilot-group-indels.tsv",
        vnames = "input_files/data/segments/nfu/nfu_vh_name_conversion.csv",
        dnames = "input_files/data/segments/nfu/nfu_dh_name_conversion.csv",
        jnames = "input_files/data/segments/nfu/nfu_jh_name_conversion.csv",
    output: 
        segments = "output_files/figures/svg/igseq-pilot-igor-segments.svg",
        indels = "output_files/figures/svg/igseq-pilot-igor-indels.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-igor-distributions.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-igor-distributions.R")

rule igseq_pilot_igor_entropies:
    input:
        entropies_indiv = "input_files/data/igor/entropies/pilot-individual-entropies.tsv",
        entropies_group = "input_files/data/igor/entropies/pilot-group-entropies.tsv",
    output:
        plot = "output_files/figures/svg/igseq-pilot-igor-entropies.svg",
        diversity_oom = "output_files/txt/igseq-pilot-igor-diversity-oom.txt",
        human_oom_low = "output_files/txt/igseq-pilot-igor-human-oom-low.txt",
        human_oom_high = "output_files/txt/igseq-pilot-igor-human-oom-high.txt",
        h_total = "output_files/txt/igseq-pilot-igor-entropy-total.txt",
        h_gene = "output_files/txt/igseq-pilot-igor-entropy-gene.txt",
        h_ins = "output_files/txt/igseq-pilot-igor-entropy-ins.txt",
        h_del = "output_files/txt/igseq-pilot-igor-entropy-del.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-igor-entropies.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-igor-entropies.R")

rule igseq_pilot_junctional_nn:
    input: "input_files/data/changeo/db/pilot-final.tab"
    output:
        tab = "output_files/tables/igseq-pilot-filtered-nn.tex",
        nn_any = "output_files/txt/igseq-pilot-filtered-nn-any.txt",
        nseq_1n_total = "output_files/txt/igseq-pilot-filtered-1n-total.txt",
        nseq_1n_withn = "output_files/txt/igseq-pilot-filtered-1n-withn.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-junctional-n.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-junctional-n.R")

rule igseq_pilot_igor_seqs:
    input: "input_files/data/changeo/db/pilot-igor.tab"
    output:
        min = "output_files/txt/igseq-pilot-igor-seqs-min.txt",
        max = "output_files/txt/igseq-pilot-igor-seqs-max.txt",
        sum = "output_files/txt/igseq-pilot-igor-seqs-sum.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-pilot-igor-seqs.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-pilot-igor-seqs.R")

#-----------------------------------------------------------------------------
# Ageing dataset
#-----------------------------------------------------------------------------

rule igseq_ageing_read_survival:
    input: "input_files/data/changeo/survival/ageing-survival.tsv"
    output:
        init = "output_files/figures/svg/igseq-ageing-read-survival-init.svg",
        all = "output_files/figures/svg/igseq-ageing-read-survival-all.svg",
        nreads_raw_total = "output_files/txt/igseq-ageing-nreads-raw-total.txt",
        nreads_raw_replicate_min = "output_files/txt/igseq-ageing-nreads-raw-replicate-min.txt",
        nreads_raw_replicate_max = "output_files/txt/igseq-ageing-nreads-raw-replicate-max.txt",
        nreads_raw_individual_min = "output_files/txt/igseq-ageing-nreads-raw-individual-min.txt",
        nreads_raw_individual_max = "output_files/txt/igseq-ageing-nreads-raw-individual-max.txt",
        surv_init_min = "output_files/txt/igseq-ageing-read-survival-init-min.txt",
        surv_init_max = "output_files/txt/igseq-ageing-read-survival-init-max.txt",
        rel_loss_min = "output_files/txt/igseq-ageing-rel-loss-min.txt",
        rel_loss_max = "output_files/txt/igseq-ageing-rel-loss-max.txt",
        rel_loss_total = "output_files/txt/igseq-ageing-rel-loss-total.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-read-survival.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-read-survival.R")

rule igseq_ageing_functional:
    input: "input_files/data/changeo/db/ageing-named.tab"
    output:
        prop = "output_files/figures/svg/igseq-ageing-functional-prop.svg",
        vscores = "output_files/figures/svg/igseq-ageing-functional-vscores.svg",
        nseq_total = "output_files/txt/igseq-ageing-nseq-init-total.txt",
        nseq_individual_min = "output_files/txt/igseq-ageing-nseq-init-individual-min.txt",
        nseq_individual_max = "output_files/txt/igseq-ageing-nseq-init-individual-max.txt",
        nseq_replicate_min = "output_files/txt/igseq-ageing-nseq-init-replicate-min.txt",
        nseq_replicate_max = "output_files/txt/igseq-ageing-nseq-init-replicate-max.txt",
        nseq_pc_functional = "output_files/txt/igseq-ageing-nseq-init-pc-functional.txt",
        nseq_pc_noj = "output_files/txt/igseq-ageing-nseq-init-pc-noj.txt",
        nseq_pc_other = "output_files/txt/igseq-ageing-nseq-init-pc-other.txt",
        nreads_pc_functional = "output_files/txt/igseq-ageing-nreads-init-pc-functional.txt",
        nreads_pc_noj = "output_files/txt/igseq-ageing-nreads-init-pc-noj.txt",
        nreads_pc_other = "output_files/txt/igseq-ageing-nreads-init-pc-other.txt",
        vmean_functional = "output_files/txt/igseq-ageing-vscore-mean-functional.txt",
        vmean_noj = "output_files/txt/igseq-ageing-vscore-mean-noj.txt",
        vmean_other = "output_files/txt/igseq-ageing-vscore-mean-other.txt",
        vsd_functional = "output_files/txt/igseq-ageing-vscore-sd-functional.txt",
        vsd_noj = "output_files/txt/igseq-ageing-vscore-sd-noj.txt",
        vsd_other = "output_files/txt/igseq-ageing-vscore-sd-other.txt",
        nseq_dropped_vscore = "output_files/txt/igseq-ageing-nseq-init-dropped-vscore.txt",
        nreads_dropped_vscore = "output_files/txt/igseq-ageing-nreads-init-pc-dropped-vscore.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-functional.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-functional.R")

rule igseq_ageing_clone_counts:
    input: "input_files/data/changeo/db/ageing-final.tab",
    output:
        nclones = "output_files/figures/svg/igseq-ageing-nclones.svg",
        prop = "output_files/figures/svg/igseq-ageing-clone-proportions.svg",
        sizes = "output_files/figures/svg/igseq-ageing-clone-sizes.svg",
        has_clone = "output_files/txt/igseq-ageing-pc-seq-assigned-clones.txt",
        clones_indiv_min = "output_files/txt/igseq-ageing-nclones-individual-min.txt",
        clones_indiv_max = "output_files/txt/igseq-ageing-nclones-individual-max.txt",
        clones_indiv_med = "output_files/txt/igseq-ageing-nclones-individual-med.txt",
        clones_indiv_min_pilot = "output_files/txt/igseq-ageing-nclones-individual-min-pilot.txt",
        clones_indiv_max_pilot = "output_files/txt/igseq-ageing-nclones-individual-max-pilot.txt",
        counts_kruskal = "output_files/txt/igseq-ageing-nclones-kruskal-p.txt",
        pc_1count = "output_files/txt/igseq-ageing-clones-pc-1count.txt",
        pc_small = "output_files/txt/igseq-ageing-clones-pc-small.txt",
        seq_small = "output_files/txt/igseq-ageing-pc-seq-in-small-clones-avg.txt",
        seq_small_kruskal = "output_files/txt/igseq-ageing-pc-seq-in-small-clones-kruskal-p.txt",
        nclones_1rep = "output_files/txt/igseq-ageing-nclones-pc-1rep.txt",
        nclones_2rep = "output_files/txt/igseq-ageing-nclones-pc-2rep.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-clone-counts.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-clone-counts.R")

rule igseq_ageing_clone_diversity:
    input:
        grouped = "input_files/data/changeo/spectra/ageing-clone-diversity-grouped.tsv",
        solo = "input_files/data/changeo/spectra/ageing-clone-diversity-solo.tsv",
    output:
        spectra_grouped = "output_files/figures/svg/igseq-ageing-clone-diversity.svg",
        spectra_solo = "output_files/figures/svg/igseq-ageing-clone-diversity-solo.svg",
        solofit_gamma = "output_files/figures/svg/igseq-ageing-clone-diversity-solo-fit-gamma.svg",
        solofit_linear = "output_files/figures/svg/igseq-ageing-clone-diversity-solo-fit-linear.svg",
        solofit_igauss = "output_files/figures/svg/igseq-ageing-clone-diversity-solo-fit-igauss.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-clone-diversity.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-clone-diversity.R")

rule igseq_ageing_segment_diversity_all:
    """Compute V/J diversity spectra across age for all clones."""
    input:
        grouped = "input_files/data/changeo/spectra/ageing-vj-diversity-grouped-all.tsv",
        solo = "input_files/data/changeo/spectra/ageing-vj-diversity-solo-all.tsv",
    output:
        alpha_beta = "output_files/figures/svg/igseq-ageing-vj-diversity-all-alpha-beta.svg",
        spectra_grouped = "output_files/figures/svg/igseq-ageing-vj-diversity-all.svg",
        spectra_solo = "output_files/figures/svg/igseq-ageing-vj-diversity-all-solo.svg",
        solofit_gamma = "output_files/figures/svg/igseq-ageing-vj-diversity-all-solo-fit-gamma.svg",
        solofit_linear = "output_files/figures/svg/igseq-ageing-vj-diversity-all-solo-fit-linear.svg",
        solofit_igauss = "output_files/figures/svg/igseq-ageing-vj-diversity-all-solo-fit-igauss.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-segment-diversity-all.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-segment-diversity.R")

rule igseq_ageing_segment_diversity_5plus:
    """Compute V/J diversity spectra across age for expanded clones."""
    input:
        grouped = "input_files/data/changeo/spectra/ageing-vj-diversity-grouped-5plus.tsv",
        solo = "input_files/data/changeo/spectra/ageing-vj-diversity-solo-5plus.tsv",
    output:
        alpha_beta = "output_files/figures/svg/igseq-ageing-vj-diversity-5plus-alpha-beta.svg",
        spectra_grouped = "output_files/figures/svg/igseq-ageing-vj-diversity-5plus.svg",
        solofit_gamma = "output_files/figures/svg/igseq-ageing-vj-diversity-5plus-solo-fit-gamma.svg",
        solofit_linear = "output_files/figures/svg/igseq-ageing-vj-diversity-5plus-solo-fit-linear.svg",
        solofit_igauss = "output_files/figures/svg/igseq-ageing-vj-diversity-5plus-solo-fit-igauss.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-segment-diversity-5plus.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-segment-diversity-5plus.R")

rule igseq_ageing_igor_entropies:
    input:
        entropies_indiv = "input_files/data/igor/entropies/ageing-individual-entropies.tsv",
        entropies_group = "input_files/data/igor/entropies/ageing-group-entropies.tsv",
    output:
        plot = "output_files/figures/svg/igseq-ageing-igor-entropies.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-igor-entropies.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-igor-entropies.R")

rule igseq_ageing_igor_distributions:
    input:
        segments_indiv = "input_files/data/igor/segments/ageing-individual-segments.tsv",
        segments_group = "input_files/data/igor/segments/ageing-group-segments.tsv",
        indels_indiv = "input_files/data/igor/indels/ageing-individual-indels.tsv",
        indels_group = "input_files/data/igor/indels/ageing-group-indels.tsv",
        vnames = "input_files/data/segments/nfu/nfu_vh_name_conversion.csv",
        dnames = "input_files/data/segments/nfu/nfu_dh_name_conversion.csv",
        jnames = "input_files/data/segments/nfu/nfu_jh_name_conversion.csv",
    output: 
        segments = "output_files/figures/svg/igseq-ageing-igor-segments.svg",
        indels = "output_files/figures/svg/igseq-ageing-igor-indels.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-igor-distributions.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-igor-distributions.R")

rule igseq_ageing_igor_seqs:
    input: "input_files/data/changeo/db/ageing-igor.tab"
    output:
        tab = "output_files/tables/igseq-ageing-igor-seqs.tex",
        min = "output_files/txt/igseq-ageing-igor-seqs-min.txt",
        max = "output_files/txt/igseq-ageing-igor-seqs-max.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-ageing-igor-seqs.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-igor-seqs.R")

rule igseq_ageing_rdi:
    input: "input_files/data/changeo/db/ageing-final.tab"
    output: "output_files/figures/svg/igseq-ageing-rdi.svg"
    params:
        aux = aux_dir,
        rdi = config["rdi_path"],
    log: "log_files/igseq-ageing-rdi.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-ageing-rdi.R")

#-----------------------------------------------------------------------------
# Gut dataset
#-----------------------------------------------------------------------------

rule igseq_gut_cohorts_table:
    """Prepare summary table of gut cohorts."""
    input: "input_files/data/fish_data/gut-samples.csv"
    output:
        fish = "output_files/tables/igseq-gut-cohorts-fish.tex",
        summary = "output_files/tables/igseq-gut-cohorts-summary.tex",
    params:
        aux = aux_dir
    log: "log_files/igseq-gut-cohorts-table.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-cohorts-table.R")

rule igseq_gut_read_survival:
    input: 
        survival = "input_files/data/changeo/survival/gut-survival.tsv",
        metadata = "input_files/data/fish_data/gut-samples.csv",
    output:
        init = "output_files/figures/svg/igseq-gut-read-survival-init.svg",
        all = "output_files/figures/svg/igseq-gut-read-survival-all.svg",
        rin = "output_files/figures/svg/igseq-gut-read-survival-rin.svg",
        nreads_raw_total = "output_files/txt/igseq-gut-nreads-raw-total.txt",
        nreads_raw_min = "output_files/txt/igseq-gut-nreads-raw-min.txt",
        nreads_raw_max = "output_files/txt/igseq-gut-nreads-raw-max.txt",
        surv_init_min = "output_files/txt/igseq-gut-read-survival-init-min.txt",
        surv_init_max = "output_files/txt/igseq-gut-read-survival-init-max.txt",
        rel_loss_min = "output_files/txt/igseq-gut-rel-loss-min.txt",
        rel_loss_max = "output_files/txt/igseq-gut-rel-loss-max.txt",
        rel_loss_total = "output_files/txt/igseq-gut-rel-loss-total.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-gut-read-survival.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-read-survival.R")

rule igseq_gut_functional:
    input: "input_files/data/changeo/db/gut-named.tab"
    output:
        prop = "output_files/figures/svg/igseq-gut-functional-prop.svg",
        vscores = "output_files/figures/svg/igseq-gut-functional-vscores.svg",
        nseq_total = "output_files/txt/igseq-gut-nseq-init-total.txt",
        nseq_individual_min = "output_files/txt/igseq-gut-nseq-init-individual-min.txt",
        nseq_individual_max = "output_files/txt/igseq-gut-nseq-init-individual-max.txt",
        nseq_replicate_min = "output_files/txt/igseq-gut-nseq-init-replicate-min.txt",
        nseq_replicate_max = "output_files/txt/igseq-gut-nseq-init-replicate-max.txt",
        nseq_pc_functional = "output_files/txt/igseq-gut-nseq-init-pc-functional.txt",
        nseq_pc_noj = "output_files/txt/igseq-gut-nseq-init-pc-noj.txt",
        nseq_pc_other = "output_files/txt/igseq-gut-nseq-init-pc-other.txt",
        nreads_pc_functional = "output_files/txt/igseq-gut-nreads-init-pc-functional.txt",
        nreads_pc_noj = "output_files/txt/igseq-gut-nreads-init-pc-noj.txt",
        nreads_pc_other = "output_files/txt/igseq-gut-nreads-init-pc-other.txt",
        nseq_dropped_vscore = "output_files/txt/igseq-gut-nseq-init-dropped-vscore.txt",
        nreads_dropped_vscore = "output_files/txt/igseq-gut-nreads-init-pc-dropped-vscore.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-gut-functional.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-functional.R")

rule igseq_gut_clone_counts:
    input:
        pilot = "input_files/data/changeo/db/pilot-final.tab",
        age = "input_files/data/changeo/db/ageing-final.tab",
        gut = "input_files/data/changeo/db/gut-final.tab",
        survival = "input_files/data/changeo/survival/gut-survival.tsv",
        metadata = "input_files/data/fish_data/gut-samples.csv",
    output:
        comparative = "output_files/figures/svg/igseq-nclones-comparative.svg",
        nclones = "output_files/figures/svg/igseq-gut-nclones.svg",
        has_clone = "output_files/txt/igseq-gut-pc-seq-assigned-clones.txt",
        clones_indiv_min = "output_files/txt/igseq-gut-nclones-individual-min.txt",
        clones_indiv_max = "output_files/txt/igseq-gut-nclones-individual-max.txt",
        clones_indiv_med = "output_files/txt/igseq-gut-nclones-individual-med.txt",
        counts_kruskal_age = "output_files/txt/igseq-gut-nclones-kruskal-age-p.txt",
        counts_kruskal_group = "output_files/txt/igseq-gut-nclones-kruskal-group-p.txt",
    params:
        aux = aux_dir
    log: "log_files/igseq-gut-clone-counts.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-clone-counts.R")

rule igseq_gut_clone_diversity:
    input:
        grouped_group = "input_files/data/changeo/spectra/gut-group-clone-diversity-grouped.tsv",
        solo_group = "input_files/data/changeo/spectra/gut-group-clone-diversity-solo.tsv",
        grouped_age = "input_files/data/changeo/spectra/gut-age-clone-diversity-grouped.tsv",
        solo_age = "input_files/data/changeo/spectra/gut-age-clone-diversity-solo.tsv",
    output:
        solo = "output_files/figures/svg/igseq-gut-clone-diversity-solo.svg",
        alpha_age = "output_files/figures/svg/igseq-gut-clone-diversity-alpha-age.svg",
        alpha_group = "output_files/figures/svg/igseq-gut-clone-diversity-alpha-groups.svg",
        alpha_all = "output_files/figures/svg/igseq-gut-clone-diversity-alpha.svg",
        solo_box = "output_files/figures/svg/igseq-gut-clone-diversity-solo-boxplots.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-gut-clone-diversity.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-clone-diversity.R")

rule igseq_gut_segment_diversity:
    input:
        grouped_group = "input_files/data/changeo/spectra/gut-group-vj-diversity-grouped.tsv",
        solo_group = "input_files/data/changeo/spectra/gut-group-vj-diversity-solo.tsv",
        grouped_age = "input_files/data/changeo/spectra/gut-age-vj-diversity-grouped.tsv",
        solo_age = "input_files/data/changeo/spectra/gut-age-vj-diversity-solo.tsv",
    output:
        solo = "output_files/figures/svg/igseq-gut-vj-diversity-solo.svg",
        alpha = "output_files/figures/svg/igseq-gut-vj-diversity-alpha.svg",
        beta = "output_files/figures/svg/igseq-gut-vj-diversity-beta.svg",
        solo_box = "output_files/figures/svg/igseq-gut-vj-diversity-solo-boxplots.svg",
    params:
        aux = aux_dir
    log: "log_files/igseq-gut-segment-diversity.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-segment-diversity.R")

rule igseq_gut_rdi:
    input: "input_files/data/changeo/db/gut-final.tab"
    output:
        age = "output_files/figures/svg/igseq-gut-rdi-age.svg",
        group = "output_files/figures/svg/igseq-gut-rdi-group.svg",
    params:
        aux = aux_dir,
        rdi = config["rdi_path"],
    log: "log_files/igseq-gut-rdi.dbg"
    conda: env_main
    script: os.path.join(script_dir, "igseq-gut-rdi.R")

#-----------------------------------------------------------------------------
# Cross-study rarefied clone plots
#-----------------------------------------------------------------------------

rule igseq_rarefy_clones:
    """Perform rarefaction analysis of clone counts from IgSeq datasets."""
    input:
        pilot = "input_files/data/changeo/db/pilot-final.tab",
        age = "input_files/data/changeo/db/ageing-final.tab",
        gut = "input_files/data/changeo/db/gut-final.tab",
    output: "output_files/data/igseq-rarefied-clones.tsv"
    log: "log_files/igseq-rarefy-clones.dbg"
    params:
        aux = aux_dir,
        n_repeats = 20, # Iterations per sample size
        sample_sizes = [x*100 for x in range(101)][1:],
        individuals_excluded = ["1274", "1309"],
        scale = "DUPCOUNT", # scale by UMI groups
        p = 20, # Compute P20 statistic
    conda: env_main
    script: os.path.join(script_dir, "igseq-rarefy-clones.R")

rule igseq_plot_rarefied_clones:
    """Perform rarefaction analysis of clone counts from IgSeq datasets."""
    input: "output_files/data/igseq-rarefied-clones.tsv"
    output:
       counts = "output_files/figures/svg/igseq-rarefied-clones.svg",
       sizes  = "output_files/figures/svg/igseq-rarefied-clone-counts-size.svg",
    log: "log_files/igseq-rarefy-clones.dbg"
    params:
        aux = aux_dir,
        P = 20, # P-statistic computed in previous rule
        scale = "DUPCOUNT", # scale by UMI groups
    conda: env_main
    script: os.path.join(script_dir, "igseq-plot-rarefied-clones.R")

#-----------------------------------------------------------------------------
# Collate all figures, tables, text embeds (main chapter)
#-----------------------------------------------------------------------------

# Figures
igseq_figures = ["igseq-umi-consensus", "igseq-template-switch",
            "igseq-igrace-pipeline", "igseq-preprocessing",
            "igseq-pilot-design", "igseq-pilot-read-survival-init",
            "igseq-pilot-functional-prop", "igseq-pilot-functional-vscores",
            "igseq-pilot-clone-sizes", "igseq-pilot-clone-sizes-cor",
            "igseq-pilot-clone-zipf-lines", "igseq-pilot-clone-zipf-grad",
            "igseq-pilot-clone-p20", "igseq-pilot-clone-expansions",
            "igseq-pilot-clone-diversity", "igseq-pilot-clone-diversity-solo-box",
            "igseq-pilot-clone-diversity-metrics-cor", "igseq-pilot-vj-rank-frequency",
            "igseq-pilot-vj-diversity", "igseq-pilot-vj-diversity-solo-box",
            "igseq-pilot-rdi", "igseq-pilot-igor-segments",
            "igseq-pilot-igor-indels", "igseq-pilot-igor-entropies",
            "igseq-human-repertoire-entropy", "igseq-ageing-read-survival-all",
            "igseq-ageing-clone-diversity", "igseq-ageing-clone-diversity-solo-fit-gamma",
            "igseq-ageing-vj-diversity-all-alpha-beta",
            "igseq-ageing-vj-diversity-all-solo-fit-gamma",
            "igseq-ageing-vj-diversity-5plus-alpha-beta",
            "igseq-ageing-vj-diversity-5plus-solo-fit-gamma",
            "igseq-ageing-igor-entropies", "igseq-ageing-rdi",
            "igseq-gut-design", "igseq-gut-read-survival-all",
            "igseq-gut-nclones", "igseq-nclones-comparative",
            "igseq-rarefied-clones", "igseq-rarefied-clone-counts-size",
            "igseq-gut-clone-diversity-alpha", "igseq-gut-clone-diversity-solo-boxplots",
            "igseq-gut-vj-diversity-alpha", "igseq-gut-vj-diversity-solo-boxplots",
            "igseq-gut-vj-diversity-beta", "igseq-gut-rdi-age",
            "igseq-gut-rdi-group"]

# Tables
igseq_tables = ["igseq-cohorts-summary", "igseq-pilot-filtered-nn",
             "igseq-ageing-igor-seqs", "igseq-gut-cohorts-summary"]

# Text embeds
igseq_text_embeds = ["igseq-pilot-nreads-raw-total", 
        "igseq-pilot-nreads-raw-replicate-min", "igseq-pilot-nreads-raw-replicate-max",
        "igseq-pilot-nreads-raw-individual-min", "igseq-pilot-nreads-raw-individual-max",
        "igseq-pilot-read-survival-init-min", "igseq-pilot-read-survival-init-max",
        "igseq-pilot-nseq-init-replicate-min", "igseq-pilot-nseq-init-replicate-max",
        "igseq-pilot-nseq-init-individual-min", "igseq-pilot-nseq-init-individual-max",
        "igseq-pilot-nseq-init-total", "igseq-pilot-nseq-init-pc-functional",
        "igseq-pilot-nreads-init-pc-functional", "igseq-pilot-nseq-init-pc-noj",
        "igseq-pilot-nreads-init-pc-noj", "igseq-pilot-nseq-init-pc-other",
        "igseq-pilot-nreads-init-pc-other", "igseq-pilot-vscore-mean-noj",
        "igseq-pilot-vscore-sd-noj", "igseq-pilot-vscore-mean-other",
        "igseq-pilot-vscore-sd-other", "igseq-pilot-vscore-mean-functional",
        "igseq-pilot-vscore-sd-functional", "igseq-pilot-nseq-init-dropped-vscore",
        "igseq-ageing-rel-loss-total", "igseq-pilot-read-survival-all-min",
        "igseq-pilot-read-survival-all-max", "igseq-pilot-nseq-init-kept-vscore",
        "igseq-pilot-nseq-init-functional-filtered", "igseq-pilot-nseq-init-pc-functional-filtered",
        "igseq-pilot-nseq-init-other-filtered", "igseq-pilot-nseq-init-pc-other-filtered",
        "igseq-pilot-nseq-init-noj-filtered", "igseq-pilot-nseq-init-pc-noj-filtered",
        "igseq-pilot-filtered-nn-any", "igseq-pilot-filtered-1n-total",
        "igseq-pilot-filtered-1n-withn", "igseq-pilot-nseq-assigned-clones",
        "igseq-pilot-nseq-lost-clonotyping", "igseq-pilot-pc-reads-lost-clonotyping",
        "igseq-pilot-nclones-individual-min", "igseq-pilot-nclones-individual-max",
        "igseq-pilot-nclones-pc-1count", "igseq-pilot-nclones-pc-small",
        "igseq-pilot-nclones-pc-1rep", "igseq-pilot-nclones-pc-2rep",
        "igseq-pilot-nclones-pc-1rep", "igseq-pilot-clones-interrep-cor-avg",
        "igseq-pilot-clone-zipf-exp-min", "igseq-pilot-clone-zipf-exp-max",
        "igseq-pilot-clone-zipf-exp-null-min", "igseq-pilot-clone-zipf-exp-null-max",
        "igseq-pilot-clone-zipf-p20-obs-min", "igseq-pilot-clone-zipf-p20-obs-max",
        "igseq-pilot-clone-zipf-p20-exp-min", "igseq-pilot-clone-zipf-p20-exp-max",
        "igseq-pilot-clone-diversity-cor-rep-best-metric",
        "igseq-pilot-clone-diversity-cor-rep-best-q",
        "igseq-pilot-clone-diversity-cor-rep-best-r",
        "igseq-pilot-clone-diversity-cor-avg-best-q",
        "igseq-pilot-clone-diversity-cor-avg-best-metric",
        "igseq-pilot-clone-diversity-cor-avg-best-r",
        "igseq-pilot-clone-diversity-cor-avg-cross-q",
        "igseq-pilot-clone-diversity-cor-avg-sfilter-best-r",
        "igseq-pilot-clone-diversity-cor-avg-sfilter-best-q", "igseq-pilot-one-vj-n-pc",
        "igseq-pilot-one-vj-conscount-pc", "igseq-pilot-one-vdj-n-pc",
        "igseq-pilot-one-vdj-conscount-pc", "igseq-pilot-ambig-d-n-pc",
        "igseq-pilot-ambig-d-conscount-pc", "igseq-pilot-vj-p20-min",
        "igseq-pilot-vj-p20-max", "igseq-pilot-vj-n-theoretical",
        "igseq-pilot-vj-n-any", "igseq-pilot-vj-pc-any",
        "igseq-pilot-vj-n-min", "igseq-pilot-vj-pc-min",
        "igseq-pilot-vj-n-max", "igseq-pilot-vj-pc-max",
        "igseq-pilot-igor-seqs-sum", "igseq-pilot-igor-seqs-min",
        "igseq-pilot-igor-seqs-max", "igseq-pilot-igor-entropy-total",
        "igseq-pilot-igor-entropy-gene", "igseq-pilot-igor-entropy-ins",
        "igseq-pilot-igor-diversity-oom", "igseq-pilot-igor-human-oom-low",
        "igseq-pilot-igor-human-oom-high", "igseq-pilot-igor-entropy-ins",
        "igseq-ageing-nreads-raw-total", "igseq-ageing-nreads-raw-replicate-min",
        "igseq-ageing-nreads-raw-replicate-max", "igseq-ageing-nreads-raw-individual-min",
        "igseq-ageing-nreads-raw-individual-max", "igseq-ageing-read-survival-init-min",
        "igseq-ageing-read-survival-init-max", "igseq-ageing-rel-loss-total",
        "igseq-ageing-rel-loss-max", "igseq-pilot-rel-loss-total",
        "igseq-pilot-rel-loss-max", "igseq-ageing-pc-seq-assigned-clones",
        "igseq-ageing-nclones-individual-min", "igseq-ageing-nclones-individual-max",
        "igseq-ageing-nclones-individual-med", "igseq-ageing-nclones-kruskal-p",
        "igseq-pilot-nclones-individual-med", "igseq-ageing-nclones-individual-min-pilot",
        "igseq-ageing-nclones-individual-max-pilot", "igseq-ageing-clones-pc-1count",
        "igseq-ageing-clones-pc-small", "igseq-ageing-pc-seq-in-small-clones-avg",
        "igseq-ageing-pc-seq-in-small-clones-kruskal-p", "igseq-ageing-igor-seqs-min",
        "igseq-ageing-igor-seqs-max", "igseq-gut-nreads-raw-total",
        "igseq-gut-nreads-raw-min", "igseq-gut-nreads-raw-max",
        "igseq-gut-read-survival-init-min", "igseq-gut-read-survival-init-max",
        "igseq-gut-rel-loss-total", "igseq-gut-rel-loss-max",
        "igseq-gut-pc-seq-assigned-clones", "igseq-gut-nclones-individual-min",
        "igseq-gut-nclones-individual-max", "igseq-gut-nclones-individual-med",
        "igseq-gut-nclones-kruskal-age-p", "igseq-gut-nclones-kruskal-age-p",
        "igseq-gut-nclones-kruskal-group-p"]

#-----------------------------------------------------------------------------
# Collate all supplementary material
#-----------------------------------------------------------------------------

igseq_pilot_figures_si = ["igseq-pilot-read-survival-all",
            "igseq-pilot-clone-expansions-rep",
            "igseq-pilot-clone-diversity-solo", "igseq-pilot-vj-diversity-solo"]

igseq_ageing_figures_si = ["igseq-ageing-clone-diversity-solo",
            "igseq-ageing-clone-diversity-solo-fit-linear",
            "igseq-ageing-clone-diversity-solo-fit-igauss",
            "igseq-ageing-vj-diversity-all-solo", "igseq-ageing-functional-prop",
            "igseq-ageing-igor-segments", "igseq-ageing-igor-indels",
            "igseq-ageing-nclones", "igseq-ageing-clone-proportions",
            "igseq-ageing-clone-sizes"
]

igseq_gut_figures_si = ["igseq-gut-read-survival-rin",
            "igseq-gut-clone-diversity-solo", "igseq-gut-vj-diversity-solo",
            "igseq-gut-functional-prop"
            ]

igseq_figures_si = igseq_pilot_figures_si + igseq_ageing_figures_si + \
            igseq_gut_figures_si
igseq_tables_si = ["igseq-cohorts-fish_edited-2", "igseq-gut-cohorts-fish"]

#-----------------------------------------------------------------------------
# Generate files
#-----------------------------------------------------------------------------

rule igseq_figures_all:
    """Collate all figures and tables for igseq chapter."""
    input:
        expand("output_files/figures/pdf/{name}.pdf", name=igseq_figures),
        expand("output_files/figures/pdf/{name}.pdf", name=igseq_figures_si),
        expand("output_files/tables/{name}.tex", name=igseq_tables),
        expand("output_files/tables/{name}.tex", name=igseq_tables_si),
        expand("output_files/txt/{name}.txt", name=igseq_text_embeds),

